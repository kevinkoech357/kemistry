"""add timezone to user table on specific columns

Revision ID: d591c25a34a3
Revises: 
Create Date: 2024-02-24 18:15:51.665643

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "d591c25a34a3"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("role", schema=None) as batch_op:
        batch_op.alter_column(
            "id",
            existing_type=sa.VARCHAR(length=10),
            type_=sa.String(length=21),
            existing_nullable=False,
        )

    with op.batch_alter_table("roles_users", schema=None) as batch_op:
        batch_op.alter_column(
            "id",
            existing_type=sa.VARCHAR(length=10),
            type_=sa.String(length=21),
            existing_nullable=False,
        )

    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.alter_column(
            "fs_uniquifier",
            existing_type=sa.VARCHAR(length=64),
            type_=sa.String(length=100),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "last_login_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "current_login_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "confirmed_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "id",
            existing_type=sa.VARCHAR(length=10),
            type_=sa.String(length=21),
            existing_nullable=False,
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.alter_column(
            "id",
            existing_type=sa.String(length=21),
            type_=sa.VARCHAR(length=10),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "confirmed_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "current_login_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "last_login_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "fs_uniquifier",
            existing_type=sa.String(length=100),
            type_=sa.VARCHAR(length=64),
            existing_nullable=False,
        )

    with op.batch_alter_table("roles_users", schema=None) as batch_op:
        batch_op.alter_column(
            "id",
            existing_type=sa.String(length=21),
            type_=sa.VARCHAR(length=10),
            existing_nullable=False,
        )

    with op.batch_alter_table("role", schema=None) as batch_op:
        batch_op.alter_column(
            "id",
            existing_type=sa.String(length=21),
            type_=sa.VARCHAR(length=10),
            existing_nullable=False,
        )

    # ### end Alembic commands ###
